{"version":3,"sources":["webpack://duna/webpack/universalModuleDefinition","webpack://duna/webpack/bootstrap","webpack://duna/./src/base.ts","webpack://duna/./src/dom.ts","webpack://duna/./src/http.ts","webpack://duna/./src/index.ts","webpack://duna/./src/ui/ControlBase.ts","webpack://duna/./src/ui/Limiter.ts","webpack://duna/./src/ui/MaskEdit.ts","webpack://duna/./src/ui/NumericBox.ts","webpack://duna/./src/ui/SearchBox.ts","webpack://duna/./src/utils.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFa;AACb,8CAA8C,cAAc;AAC5D;;;;;;;;;;;;;ACFa;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrDa;AACb,8CAA8C,cAAc;AAC5D,cAAc,mBAAO,CAAC,+BAAS;AAC/B;AACA;AACA;AACA;AACA,gCAAgC;AAChC,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oBAAoB,EAAE,UAAU;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA,6CAA6C,YAAY,OAAO;AAChE;AACA;;;;;;;;;;;;;AC/Ea;AACb,eAAe,mBAAO,CAAC,6BAAQ;AAC/B,cAAc,mBAAO,CAAC,+BAAS;AAC/B,YAAY,mBAAO,CAAC,2BAAO;AAC3B,aAAa,mBAAO,CAAC,6BAAQ;AAC7B,qBAAqB,mBAAO,CAAC,+CAAiB;AAC9C,oBAAoB,mBAAO,CAAC,6CAAgB;AAC5C,kBAAkB,mBAAO,CAAC,yCAAc;AACxC,mBAAmB,mBAAO,CAAC,2CAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,qCAAqC,QAAQ,aAAa,EAAE,EAAE;AAC9D,oCAAoC,QAAQ,YAAY,EAAE,EAAE;AAC5D,sCAAsC,QAAQ,cAAc,EAAE,EAAE;AAChE,wCAAwC,QAAQ,uBAAuB,EAAE,EAAE;AAC3E;;;;;;;;;;;;;ACxBa;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA,0BAA0B,qCAAqC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,sBAAsB,IAAI,WAAW;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,yBAAyB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;ACvDa;AACb,8CAA8C,cAAc;AAC5D,cAAc,mBAAO,CAAC,gCAAU;AAChC,YAAY,mBAAO,CAAC,4BAAQ;AAC5B,sBAAsB,mBAAO,CAAC,8CAAe;AAC7C;AACA;AACA;AACA;AACA,oCAAoC,IAAI,KAAK,IAAI;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD,wDAAwD,yBAAyB;AACjF;AACA;AACA;AACA;AACA;AACA,sDAAsD,yBAAyB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,yBAAyB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,EAAE;AAClC,+BAA+B,EAAE;AACjC,oDAAoD,yBAAyB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvIa;AACb,8CAA8C,cAAc;AAC5D,cAAc,mBAAO,CAAC,gCAAU;AAChC,sBAAsB,mBAAO,CAAC,8CAAe;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gBAAgB;AACtC,sBAAsB,mBAAmB;AACzC,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,gCAAgC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gCAAgC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,sBAAsB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,sCAAsC;AAC1F;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChQa;AACb,8CAA8C,cAAc;AAC5D,cAAc,mBAAO,CAAC,gCAAU;AAChC,sBAAsB,mBAAO,CAAC,8CAAe;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,EAAE,MAAM,oBAAoB,IAAI,mBAAmB;AAChG;AACA,+CAA+C,oBAAoB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,oBAAoB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC/Ia;AACb,8CAA8C,cAAc;AAC5D,cAAc,mBAAO,CAAC,gCAAU;AAChC,YAAY,mBAAO,CAAC,4BAAQ;AAC5B,aAAa,mBAAO,CAAC,8BAAS;AAC9B,sBAAsB,mBAAO,CAAC,8CAAe;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,EAAE;AACxC,8BAA8B,EAAE;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,MAAM;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,mCAAmC;AACrG;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,EAAE;AAC/E;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,2DAA2D,EAAE,MAAM,GAAG;AACtE,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,2DAA2D,6BAA6B;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,SAAS,QAAQ,EAAE;AACvE,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,wDAAwD,gBAAgB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnXa;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,KAAK;AAC7B,gBAAgB,cAAc,KAAK;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,cAAc;AAC1D,gCAAgC,OAAO,QAAQ,OAAO,QAAQ,OAAO;AACrE;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,eAAe,GAAG,oBAAoB;AACxE,iBAAiB;AACjB;AACA;AACA,8BAA8B,eAAe,GAAG,sBAAsB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,IAAI;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"duna.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"duna\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"duna\"] = factory();\n\telse\n\t\troot[\"duna\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.ts\");\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.version = \"1.0.0\";\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction getSize(element) {\r\n    let hidden = /none/i.test(element.style.display || '');\r\n    if (hidden)\r\n        element.style.display = null;\r\n    let result = { width: element.offsetWidth, height: element.offsetHeight };\r\n    if (hidden)\r\n        element.style.display = \"none\";\r\n    return result;\r\n}\r\nexports.getSize = getSize;\r\nfunction isVisible(element) {\r\n    return element.offsetWidth > 0 && element.offsetHeight > 0;\r\n}\r\nexports.isVisible = isVisible;\r\nfunction addClass(element, className) {\r\n    if (!className)\r\n        return;\r\n    let classes = element.className.split(' ')\r\n        .concat(className.split(' '))\r\n        .reduce((previous, current) => {\r\n        if (previous.indexOf(current) === -1)\r\n            previous.push(current);\r\n        return previous;\r\n    }, []);\r\n    element.className = classes.filter(name => name).join(' ');\r\n}\r\nexports.addClass = addClass;\r\nfunction removeClass(element, className) {\r\n    if (!className)\r\n        return;\r\n    let names = className.split(' ');\r\n    let classes = element.className.split(' ').filter(name => names.indexOf(name) === -1);\r\n    if (!classes.length)\r\n        element.removeAttribute(\"class\");\r\n    else\r\n        element.className = classes.filter(name => name).join(' ');\r\n}\r\nexports.removeClass = removeClass;\r\nfunction setStyle(element, styles) {\r\n    for (let name in styles)\r\n        element.style[name] = styles[name];\r\n}\r\nexports.setStyle = setStyle;\r\nfunction getStyle(element, name) {\r\n    return document.defaultView.getComputedStyle(element).getPropertyValue(name);\r\n}\r\nexports.getStyle = getStyle;\r\nfunction removeChildren(element) {\r\n    while (element.lastChild)\r\n        element.removeChild(element.lastChild);\r\n}\r\nexports.removeChildren = removeChildren;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst utils = require(\"./utils\");\r\nfunction getHeaders(options) {\r\n    const defaultHeaders = {\r\n        \"Accept\": \"text/plain, text/javascript, application/json, application/xml, */*\",\r\n        \"Content-Type\": options.json\r\n            ? \"application/json; charset=UTF-8\"\r\n            : \"application/x-www-form-urlencoded; charset=UTF-8\"\r\n    };\r\n    let normalizedHeaders = {};\r\n    let headers = options.headers || {};\r\n    for (var p in headers)\r\n        normalizedHeaders[utils.titleCase(p)] = headers[p];\r\n    if (!options.crossDomain || !defaultHeaders[\"X-Requested-With\"])\r\n        defaultHeaders[\"X-Requested-With\"] = \"XMLHttpRequest\";\r\n    return Object.assign({}, defaultHeaders, normalizedHeaders);\r\n}\r\nfunction getResponseConverter(optionsResponseConverter) {\r\n    if (optionsResponseConverter && utils.isFunction(optionsResponseConverter))\r\n        return optionsResponseConverter;\r\n    return (xhr, options) => {\r\n        let responseHeader = xhr.getResponseHeader(\"Content-Type\") || '';\r\n        if (responseHeader.indexOf(\"application/json\") > -1 || utils.isJsonLike(xhr.responseText))\r\n            return JSON.parse(xhr.response);\r\n        return responseHeader.toLowerCase() === \"text/xml\"\r\n            ? xhr.responseXML\r\n            : xhr.responseText;\r\n    };\r\n}\r\nfunction startRequest(method, url, options) {\r\n    return new Promise((done, error) => {\r\n        let xhr = new XMLHttpRequest();\r\n        if (options.withCredentials)\r\n            xhr.withCredentials = options.withCredentials;\r\n        xhr.open(method, url, true, options.user, options.password);\r\n        let headers = options.headers || {};\r\n        for (var p in headers)\r\n            xhr.setRequestHeader(p, headers[p]);\r\n        xhr.onload = () => {\r\n            let response = {\r\n                data: getResponseConverter(options.responseConverter)(xhr, options),\r\n                contentType: xhr.getResponseHeader(\"Content-Type\"),\r\n                options,\r\n                status: xhr.status,\r\n                statusText: xhr.statusText\r\n            };\r\n            if (xhr.status >= 200 && xhr.status < 300)\r\n                done(response);\r\n            else\r\n                error(response);\r\n        };\r\n        let data = options.data;\r\n        if (utils.isObject(data))\r\n            data = JSON.stringify(data);\r\n        xhr.send(data);\r\n    });\r\n}\r\nfunction init(method, url, options) {\r\n    let headers = getHeaders(options);\r\n    if (method.toLowerCase() === \"get\" && (headers[\"Content-Type\"] || '').indexOf(\"application/json\") === 0) {\r\n        let index = url.indexOf(\"?\");\r\n        let query = utils.fromQuery(url.slice(index + 1));\r\n        if (query) {\r\n            let jsonValue = utils.toQuery(query, encodeURIComponent, JSON.stringify);\r\n            url = `${url.slice(0, index)}${jsonValue}`;\r\n        }\r\n        options.headers = headers;\r\n    }\r\n    return startRequest(method, url, options);\r\n}\r\nexports.init = init;\r\nfunction get(url, options) {\r\n    return init(\"get\", url, options || {});\r\n}\r\nexports.get = get;\r\nfunction post(url, data, options) {\r\n    return init(\"post\", url, Object.assign({}, options, { data }));\r\n}\r\nexports.post = post;\r\n","\"use strict\";\r\nconst base_1 = require(\"./base\");\r\nconst utils = require(\"./utils\");\r\nconst dom = require(\"./dom\");\r\nconst http = require(\"./http\");\r\nconst NumericBox_1 = require(\"./ui/NumericBox\");\r\nconst SearchBox_1 = require(\"./ui/SearchBox\");\r\nconst Limiter_1 = require(\"./ui/Limiter\");\r\nconst MaskEdit_1 = require(\"./ui/MaskEdit\");\r\nlet duna = {};\r\nObject.defineProperty(duna, \"ui\", {\r\n    get() {\r\n        return {\r\n            NumericBox: NumericBox_1.default,\r\n            SearchBox: SearchBox_1.default,\r\n            Limiter: Limiter_1.default,\r\n            MaskEdit: MaskEdit_1.default\r\n        };\r\n    }\r\n});\r\nObject.defineProperty(duna, \"http\", { get() { return http; } });\r\nObject.defineProperty(duna, \"dom\", { get() { return dom; } });\r\nObject.defineProperty(duna, \"utils\", { get() { return utils; } });\r\nObject.defineProperty(duna, \"version\", { get() { return base_1.version; } });\r\nmodule.exports = duna;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst DUNA_PROPERTY = \"$duna\";\r\nclass ControlBase {\r\n    constructor(element, options) {\r\n        this.$element = element;\r\n        this.$options = options;\r\n        this.$guid = `dn${Math.random().toString(36).substr(2)}`;\r\n        this._eventsCollection = [];\r\n        this.$initialize();\r\n        this.$invoke(this.$options.onReady, this);\r\n        this.$registerControl();\r\n    }\r\n    dispose() {\r\n        console.log(`duna: ${this.constructor.name} #${this.$guid} was disposed`);\r\n        this._eventsCollection.forEach(e => e.element.removeEventListener(e.type, e.handler, false));\r\n        this._eventsCollection = [];\r\n        for (let prop in this)\r\n            delete this[prop];\r\n    }\r\n    _ensureUniqueInstancePerType() {\r\n        let index = this.$element[DUNA_PROPERTY].findIndex(p => p.constructor.name === this.constructor.name &&\r\n            p.constructor.prototype === this.constructor.prototype);\r\n        if (index === -1)\r\n            return;\r\n        let instance = this.$element[DUNA_PROPERTY][index];\r\n        this.$element[DUNA_PROPERTY].splice(index, 1);\r\n        instance.dispose();\r\n    }\r\n    $registerControl() {\r\n        if (!Array.isArray(this.$element.hasOwnProperty(DUNA_PROPERTY)))\r\n            this.$element[DUNA_PROPERTY] = [];\r\n        this._ensureUniqueInstancePerType();\r\n        this.$element[DUNA_PROPERTY].push(this);\r\n    }\r\n    $invoke(callback, ...args) {\r\n        return typeof callback === \"function\" ? callback.apply(this, args) : undefined;\r\n    }\r\n    $addEvent(type, handler, element) {\r\n        handler = handler.bind(this);\r\n        element = element || this.$element;\r\n        this._eventsCollection.push({ type, handler, element });\r\n        element.addEventListener(type, handler, false);\r\n    }\r\n    $removeEvent(type, handler, element) {\r\n        handler = handler.bind(this);\r\n        element = element || this.$element;\r\n        let events = this._eventsCollection.filter(p => p.element === element && p.type === type);\r\n        events.forEach(e => {\r\n            let index = this._eventsCollection.indexOf(e);\r\n            this._eventsCollection.splice(index, 1);\r\n            e.element.removeEventListener(type, handler, false);\r\n        });\r\n    }\r\n}\r\nexports.default = ControlBase;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst utils = require(\"../utils\");\r\nconst dom = require(\"../dom\");\r\nconst ControlBase_1 = require(\"./ControlBase\");\r\nclass Limiter extends ControlBase_1.default {\r\n    constructor(element, options) {\r\n        let defaultOptions = {\r\n            position: \"right bottom\",\r\n            template: \"<small><em>${len} / ${max}</em></small>\",\r\n            timeout: 1.5,\r\n            offsetX: 0,\r\n            offsetY: 0,\r\n            preserve: false,\r\n            showOnFocus: false\r\n        };\r\n        super(element, utils.merge(defaultOptions, options));\r\n    }\r\n    $initialize() {\r\n        this._setRoot();\r\n        this._registerEvents();\r\n        this._configPosition();\r\n        this._timer = null;\r\n    }\r\n    dispose() {\r\n        if (this._tooltip)\r\n            this._destroy();\r\n        window.removeEventListener(\"scroll\", this._onWindowScrollOrResize, false);\r\n        super.dispose();\r\n    }\r\n    _setRoot() {\r\n        if (this.$options.root)\r\n            this._root = document.querySelector(this.$options.root);\r\n    }\r\n    _destroy() {\r\n        if (this._tooltip && this._tooltip.parentNode)\r\n            this._tooltip.parentNode.removeChild(this._tooltip);\r\n        this._tooltip = null;\r\n    }\r\n    _getTooltip(onFocus) {\r\n        let visible = this._tooltip && dom.isVisible(this._tooltip);\r\n        if (!this._tooltip) {\r\n            this.$element.insertAdjacentHTML(\"afterend\", this.$options.template);\r\n            this._tooltip = this.$element.nextElementSibling;\r\n            this._templateContent = this._tooltip.innerHTML;\r\n            this._tooltip.style.position = \"fixed\";\r\n            let rect = this.$element.getBoundingClientRect();\r\n            this._tooltip.style.left = rect.left + 'px'; // set initial position\r\n            this.$invoke(this.$options.onCreate, this, { tooltip: this._tooltip });\r\n            this._tooltip.style.display = \"none\";\r\n        }\r\n        if (!visible) {\r\n            if (onFocus && !this.$options.showOnFocus)\r\n                return this._tooltip;\r\n            this.$invoke(this.$options.onShow, this, { tooltip: this._tooltip });\r\n            this._tooltip.style.display = \"\";\r\n        }\r\n        return this._tooltip;\r\n    }\r\n    _registerEvents() {\r\n        this.$addEvent(\"focus\", this._onFocusEvent);\r\n        this.$addEvent(\"input\", this._onInputEvent);\r\n        this.$addEvent(\"blur\", this._onBlurEvent);\r\n        this.$addEvent(\"scroll\", this._onWindowScrollOrResize, window);\r\n        this.$addEvent(\"resize\", this._onWindowScrollOrResize, window);\r\n    }\r\n    _onWindowScrollOrResize() {\r\n        if (this._tooltip && dom.isVisible(this._tooltip))\r\n            this._updatePosition();\r\n    }\r\n    _onFocusEvent(e) {\r\n        if (!this.$options.showOnFocus)\r\n            return;\r\n        this._onInputEvent();\r\n    }\r\n    _onInputEvent() {\r\n        let tooltip = this._getTooltip(true);\r\n        let data = {\r\n            len: this.$element.value.length,\r\n            max: this.$element.maxLength,\r\n            rem: 0\r\n        };\r\n        data.rem = data.max - data.len;\r\n        tooltip.innerHTML = utils.template(this._templateContent, data);\r\n        this._updatePosition();\r\n        window.clearTimeout(this._timer || 0);\r\n        this._timer = window.setTimeout(() => this._onBlurEvent(), this.$options.timeout * 1000);\r\n    }\r\n    _onBlurEvent() {\r\n        if (!this._tooltip || this._tooltip.style.display === \"none\")\r\n            return;\r\n        if (!this.$options.preserve)\r\n            this._destroy.call(this);\r\n        else\r\n            this._tooltip.style.display = \"none\";\r\n        this.$invoke(this.$options.onHide, this, { tooltip: this._tooltip });\r\n    }\r\n    _updatePosition() {\r\n        let tooltip = this._getTooltip();\r\n        let rect = this.$element.getBoundingClientRect();\r\n        let position = this.$options.position;\r\n        let size = dom.getSize(tooltip);\r\n        let x = this._position.x(rect, size);\r\n        let y = this._position.y(rect, size);\r\n        x += this.$options.offsetX;\r\n        y += this.$options.offsetY;\r\n        if (this._root) {\r\n            let rootRect = this._root.getBoundingClientRect();\r\n            y -= rootRect.top;\r\n            x -= rootRect.left;\r\n        }\r\n        tooltip.style.left = `${x}px`;\r\n        tooltip.style.top = `${y}px`;\r\n        this.$invoke(this.$options.onChange, this, { tooltip: this._tooltip });\r\n    }\r\n    _configPosition() {\r\n        let pattern = {\r\n            left: (rect, size) => rect.left,\r\n            right: (rect, size) => rect.right - size.width,\r\n            top: (rect, size) => rect.top - size.height,\r\n            bottom: (rect, size) => rect.bottom\r\n        };\r\n        let position = this.$options.position;\r\n        this._position = {};\r\n        let matches = position.match(/(^| )(left|right)( |$)/);\r\n        if (matches)\r\n            this._position.x = pattern[matches[2]];\r\n        matches = position.match(/(^| )(top|bottom)( |$)/);\r\n        if (matches)\r\n            this._position.y = pattern[matches[2]];\r\n    }\r\n    static from(selector, options) {\r\n        return [...document.querySelectorAll(selector)].map(element => new Limiter(element, options));\r\n    }\r\n}\r\nexports.default = Limiter;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst utils = require(\"../utils\");\r\nconst ControlBase_1 = require(\"./ControlBase\");\r\nclass MaskEdit extends ControlBase_1.default {\r\n    constructor(element, options) {\r\n        let defaultOptions = {\r\n            format: \"\",\r\n            placeholder: \"\",\r\n            allowPartial: false,\r\n            shifter: '_',\r\n            translation: {\r\n                '9': { test: /[0-9]/ },\r\n                'a': { test: /[A-Za-z]/ },\r\n                'A': { test: /[A-Za-z]/, transform: n => n.toUpperCase() }\r\n            }\r\n        };\r\n        super(element, utils.merge(defaultOptions, options));\r\n    }\r\n    update() {\r\n        let value = this.$element.value;\r\n        let buffer = [];\r\n        for (let i = 0, j = 0; i < this._currentFormat.length; i++) {\r\n            let result = this._applyMask(i, j, value);\r\n            if (result.arg !== undefined)\r\n                buffer.push(result.value);\r\n            if (result.ok)\r\n                j++;\r\n            else if (!result.keepRunning || value[j] === undefined)\r\n                break;\r\n        }\r\n        this._setValue(buffer.join(''));\r\n    }\r\n    getRawValue() {\r\n        let buffer = [];\r\n        let value = this.$element.value;\r\n        for (let i = 0; i < value.length; i++) {\r\n            if (this._hasTranslation(i) && value[i] !== this.$options.shifter)\r\n                buffer.push(value[i]);\r\n        }\r\n        return buffer.join('');\r\n    }\r\n    setOptions(options) {\r\n        this._setOptionsInternal(options);\r\n        this._onBlurEvent();\r\n    }\r\n    dispose() {\r\n        if (this._originalMaxLength === -1)\r\n            this.$element.removeAttribute(\"maxlength\");\r\n        else\r\n            this.$element.maxLength = this._originalMaxLength;\r\n        super.dispose();\r\n    }\r\n    $initialize() {\r\n        this._setOptionsInternal(null);\r\n        this._defineFormat(true);\r\n        this._registerEvents();\r\n        this.update();\r\n    }\r\n    _setOptionsInternal(options) {\r\n        utils.merge(this.$options, options);\r\n        this._configOptions();\r\n        this._defineFormat(true);\r\n        this._normalizeTranslations();\r\n        this.$element.value = this.getRawValue();\r\n        this.update();\r\n    }\r\n    _applyMask(i, j, value) {\r\n        let v = value[j];\r\n        let f = this._currentFormat[i];\r\n        let t = this._translations[f];\r\n        let result = {\r\n            isMask: !t && f !== undefined,\r\n            arg: v,\r\n            ok: (!!t && t.test(v || '')) || f === v,\r\n            keepRunning: !t && i < this._currentFormat.length,\r\n            value: ''\r\n        };\r\n        if (result.ok)\r\n            result.value = (t && t.transform ? t.transform : (arg) => arg)(v || '');\r\n        else\r\n            result.value = t ? '' : f;\r\n        return result;\r\n    }\r\n    _replace(e) {\r\n        e.preventDefault();\r\n        let index = this.$element.selectionStart || 0;\r\n        let buffer = this.$element.value.split('');\r\n        buffer[index] = e.key;\r\n        let value = buffer.join('');\r\n        for (let i = index; i < this._currentFormat.length; i++) {\r\n            let result = this._applyMask(i, index, value);\r\n            if (result.ok) {\r\n                buffer[i] = result.value;\r\n                index = i;\r\n                break;\r\n            }\r\n            else if (result.isMask) {\r\n                buffer[i] = result.value;\r\n            }\r\n            else {\r\n                buffer[i] = this.$element.value[i];\r\n                break;\r\n            }\r\n            if (!result.keepRunning || buffer[i] === undefined)\r\n                break;\r\n        }\r\n        this._setValue(buffer.join(''));\r\n        this._setCaretPosition(index + 1);\r\n    }\r\n    _hasTranslation(index) {\r\n        let f = this._currentFormat[index];\r\n        return !!this._translations[f];\r\n    }\r\n    _defineFormat(initialization) {\r\n        if (initialization)\r\n            this._currentFormat = this._formats[0];\r\n        if (!this._originalMaxLength)\r\n            this._originalMaxLength = this.$element.maxLength;\r\n        this.$element.maxLength = this._currentFormat.length;\r\n    }\r\n    _configOptions() {\r\n        this._formats = utils.isString(this.$options.format)\r\n            ? [this.$options.format]\r\n            : [].concat(this.$options.format);\r\n        this.$element.placeholder = this.$options.placeholder || this._formats[0];\r\n    }\r\n    _normalizeTranslations() {\r\n        this._translations = {};\r\n        let translation = this.$options.translation || {};\r\n        for (let t in translation) {\r\n            let testFn = translation[t].test;\r\n            this._translations[t] = {\r\n                test: testFn instanceof RegExp ? (value) => testFn.test(value) : testFn,\r\n                transform: translation[t].transform\r\n            };\r\n        }\r\n    }\r\n    _registerEvents() {\r\n        this.$addEvent(\"input\", this._onInputEvent);\r\n        this.$addEvent(\"keydown\", this._onKeyDownEvent);\r\n        this.$addEvent(\"blur\", this._onBlurEvent);\r\n    }\r\n    _onBlurEvent() {\r\n        let value = this.$element.value;\r\n        let hasShifter = value.indexOf(this.$options.shifter) >= 0;\r\n        if (hasShifter) {\r\n            if (this.$options.allowPartial) {\r\n                value = value.replace(new RegExp(`\\\\${this.$options.shifter}*$`, ''), '');\r\n                if (value.indexOf(this.$options.shifter) === -1) {\r\n                    this._setValue(value);\r\n                    return;\r\n                }\r\n            }\r\n            this._setValue('');\r\n            return;\r\n        }\r\n        if (value.length === this._currentFormat.length)\r\n            return;\r\n        if (!this.$options.allowPartial)\r\n            this._setValue('');\r\n    }\r\n    _onInputEvent() {\r\n        this.update();\r\n    }\r\n    _onKeyDownEvent(e) {\r\n        if (/^[cvx]$/i.test(e.key) && e.ctrlKey)\r\n            return;\r\n        let caret = this._getCaretPosition();\r\n        if (e.key.length === 1) {\r\n            if (this.$element.value[caret.start])\r\n                this._replace(e);\r\n            return;\r\n        }\r\n        if (e.key === \"Backspace\") {\r\n            this._backspaceHandler.call(this, e, caret);\r\n            return;\r\n        }\r\n        if (e.key === \"Delete\") {\r\n            this._deleteHandler.call(this, e, caret);\r\n            return;\r\n        }\r\n    }\r\n    _getMaskWithShifter() {\r\n        if (this._maskWithShifter)\r\n            return this._maskWithShifter;\r\n        let buffer = this._currentFormat.split('');\r\n        for (let i = 0; i < buffer.length; i++) {\r\n            if (this._hasTranslation(i))\r\n                buffer[i] = this.$options.shifter;\r\n        }\r\n        return (this._maskWithShifter = buffer.join(''));\r\n    }\r\n    _default(caret) {\r\n        if (!this.$element.value.length)\r\n            return true;\r\n        if (!caret.areEquals) {\r\n            if (caret.start === 0 && caret.end === this.$element.value.length)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    _deleteHandler(e, caret) {\r\n        if (this._default(caret))\r\n            return;\r\n        e.preventDefault();\r\n        do {\r\n            caret.end++;\r\n        } while (!this._hasTranslation(caret.end - 1) && caret.end < this._currentFormat.length);\r\n        let buffer = this.$element.value.split('');\r\n        let value = this._getMaskWithShifter().substring(caret.start, caret.end);\r\n        buffer.splice.apply(buffer, [caret.start, caret.end - caret.start].concat(value.split('')));\r\n        this._setValue(buffer.join(''));\r\n        this._setCaretPosition(caret.start, caret.end);\r\n    }\r\n    _backspaceHandler(e, caret) {\r\n        if (this._default(caret))\r\n            return;\r\n        e.preventDefault();\r\n        if (caret.areEquals) {\r\n            do {\r\n                caret.start = Math.max(caret.start - 1, 0);\r\n            } while (!this._hasTranslation(caret.start) && caret.start > 0);\r\n        }\r\n        let buffer = this.$element.value.split('');\r\n        if (caret.end === this.$element.value.length) {\r\n            buffer.splice(caret.start);\r\n        }\r\n        else {\r\n            let value = this._getMaskWithShifter().substring(caret.start, caret.end);\r\n            buffer.splice.apply(buffer, [caret.start, caret.end - caret.start].concat(value.split('')));\r\n        }\r\n        this._setValue(buffer.join(''));\r\n        this._setCaretPosition(caret.start);\r\n    }\r\n    _setCaretPosition(start, end = undefined) {\r\n        this.$element.selectionStart = start;\r\n        this.$element.selectionEnd = end || start;\r\n    }\r\n    _getCaretPosition() {\r\n        let start = this.$element.selectionStart || 0;\r\n        let end = this.$element.selectionEnd || 0;\r\n        return {\r\n            start,\r\n            end,\r\n            areEquals: start === end\r\n        };\r\n    }\r\n    _setValue(value) {\r\n        this.$element.value = value;\r\n        this.$invoke(this.$options.onUpdate, this, { value, rawValue: this.getRawValue() });\r\n    }\r\n    static from(selector, options) {\r\n        return [...document.querySelectorAll(selector)].map(element => new MaskEdit(element, options));\r\n    }\r\n}\r\nexports.default = MaskEdit;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst utils = require(\"../utils\");\r\nconst ControlBase_1 = require(\"./ControlBase\");\r\nclass NumericBox extends ControlBase_1.default {\r\n    constructor(element, options) {\r\n        let defaultOptions = {\r\n            scale: 0,\r\n            decimalSeparator: '.',\r\n            groupingSeparator: ',',\r\n            format: ['-n', 'n', 'n'],\r\n            placeholder: 'n',\r\n            nullable: false\r\n        };\r\n        super(element, utils.merge(defaultOptions, options));\r\n    }\r\n    $initialize() {\r\n        this._normalizeFormat();\r\n        this._registerEvents();\r\n        this.format();\r\n    }\r\n    format() {\r\n        let text = this.getRawValue() || \"\";\r\n        let o = this.$options;\r\n        let ev = { value: 0, text: \"\" };\r\n        if (!text && o.nullable) {\r\n            this.$invoke(o.onFormat, this, ev);\r\n            return;\r\n        }\r\n        text = text.replace(o.decimalSeparator || '', \".\");\r\n        let n = parseFloat(text);\r\n        if (!utils.isNumber(n))\r\n            n = 0;\r\n        n = this._ensureRange(n, o.min, o.max);\r\n        let scale = utils.isNumber(o.scale) ? o.scale : 0;\r\n        let ns = n.toFixed(scale);\r\n        text = ns.replace(\".\", o.decimalSeparator || '');\r\n        if (scale > 0) {\r\n            let expr = new RegExp(`(\\\\d)(\\\\d{3}([\\\\${o.groupingSeparator}\\\\${o.decimalSeparator}]))`);\r\n            while (expr.test(text))\r\n                text = text.replace(expr, `$1${o.groupingSeparator}$2`);\r\n        }\r\n        let formatted = \"\";\r\n        let f = this._dataFormat;\r\n        let placeholder = o.placeholder || '';\r\n        if (n === 0)\r\n            formatted = f[2].replace(placeholder, text);\r\n        else {\r\n            formatted = (n > 0)\r\n                ? (f[1]).replace(placeholder, text)\r\n                : f[0].replace(placeholder, text.replace('-', ''));\r\n        }\r\n        ev.value = parseFloat(ns);\r\n        ev.text = formatted;\r\n        this.$invoke(o.onFormat, this, ev);\r\n        this.$element.value = formatted;\r\n    }\r\n    getRawValue() {\r\n        let value = this.$element.value;\r\n        if (!value)\r\n            return \"\";\r\n        let matches = value.match(/[-\\d]+/g);\r\n        if (!matches || !matches.length)\r\n            return \"\";\r\n        if (value[0] === ',' || value[0] === '.')\r\n            matches.unshift('0');\r\n        let len = matches.length;\r\n        if (len === 1)\r\n            return parseFloat(matches[0]).toString();\r\n        let result = \"\";\r\n        let separator = this.$options.scale > 0 ? \".\" : \"\";\r\n        while (--len > -1) {\r\n            result = separator + matches[len] + result;\r\n            separator = \"\";\r\n        }\r\n        if (!result)\r\n            return result;\r\n        return parseFloat(result).toFixed(this.$options.scale);\r\n    }\r\n    _normalizeFormat() {\r\n        let format = this.$options.format;\r\n        if (utils.isString(format)) {\r\n            format = ['-' + format, format, format];\r\n        }\r\n        else if (Array.isArray(format) && format.length === 2)\r\n            format.push(format[1]);\r\n        this._dataFormat = format;\r\n    }\r\n    _registerEvents() {\r\n        this.$addEvent(\"focus\", this._onFocusEvent);\r\n        this.$addEvent(\"click\", this._onFocusEvent);\r\n        this.$addEvent(\"keydown\", this._onKeyDownEvent);\r\n        this.$addEvent(\"change\", this._onChangeEvent);\r\n        this.$addEvent(\"blur\", this.format);\r\n    }\r\n    _onKeyDownEvent(e) {\r\n        let el = this.$element;\r\n        if (e.key === \"Enter\") {\r\n            el.blur();\r\n            return;\r\n        }\r\n        if (e.key.length > 1)\r\n            return;\r\n        if ((/[0-9]/.test(e.key) && !e.shiftKey))\r\n            return;\r\n        let negSign = (e.key === \"-\");\r\n        if (negSign && (!el.value || (el.selectionStart === 0 || document.getSelection().toString() === el.value)))\r\n            return;\r\n        let scale = this.$options.scale;\r\n        if (/[.,]/.test(e.key) && utils.isNumber(scale) && scale > 0 && (!/[.,]/g.test(el.value) || document.getSelection().toString() === el.value))\r\n            return;\r\n        e.preventDefault();\r\n    }\r\n    _onFocusEvent(e) {\r\n        let el = this.$element;\r\n        if (!this.$options.nullable && !el.value)\r\n            this.format();\r\n        if (!el.hasAttribute(\"readonly\"))\r\n            el.value = this.getRawValue();\r\n        el.select();\r\n        e.preventDefault();\r\n    }\r\n    _onChangeEvent(e) {\r\n        let o = this.$options;\r\n        let inputValue = parseFloat(this.getRawValue());\r\n        let value = this._ensureRange(inputValue, o.min, o.max);\r\n        this.$invoke(this.$options.onChange, this, { value, inputValue });\r\n    }\r\n    _ensureRange(n, min, max) {\r\n        let hasMin = utils.isNumber(min);\r\n        let hasMax = utils.isNumber(max);\r\n        if (hasMin && hasMax && min >= max)\r\n            throw new RangeError(\"min must have a lesser value than max\");\r\n        if (hasMin && n < min)\r\n            return min;\r\n        if (hasMax && n > max)\r\n            return max;\r\n        return n;\r\n    }\r\n    static from(selector, options) {\r\n        return [...document.querySelectorAll(selector)].map(element => new NumericBox(element, options));\r\n    }\r\n}\r\nexports.default = NumericBox;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst utils = require(\"../utils\");\r\nconst dom = require(\"../dom\");\r\nconst http = require(\"../http\");\r\nconst ControlBase_1 = require(\"./ControlBase\");\r\nconst SEARCH_BOX_DATA_VALUE = \"dunaSearchBoxDataValue\";\r\nclass SearchBox extends ControlBase_1.default {\r\n    constructor(element, options) {\r\n        if (!options)\r\n            throw new Error(\"SearchBox.options is required.\");\r\n        if (!options.template)\r\n            throw new Error(\"SearchBox.options.template is required.\");\r\n        if (!options.source)\r\n            throw new Error(\"SearchBox.source is required.\");\r\n        const defaultOptions = {\r\n            template: '',\r\n            activeItemClass: \"active\",\r\n            delay: 500,\r\n            source: [],\r\n            matchesTemplate: \"<mark>${0}</mark>\",\r\n            fieldTemplate: \"${0}\",\r\n            maxResults: 10,\r\n            minLength: 2,\r\n            offsetX: 0,\r\n            offsetY: 2,\r\n            dataRoot: \"data\",\r\n            noRecordsTemplate: \"<div>No records found</div>\",\r\n            searchFields: []\r\n        };\r\n        super(element, utils.merge(defaultOptions, options));\r\n    }\r\n    $initialize() {\r\n        this._setRoot();\r\n        this._createTemplate();\r\n        this._defineSourceHandler();\r\n        this._registerEvents();\r\n    }\r\n    _setRoot() {\r\n        if (this.$options.root)\r\n            this._root = document.querySelector(this.$options.root);\r\n    }\r\n    _createTemplate() {\r\n        let template = this.$options.template;\r\n        this.$element.insertAdjacentHTML(\"afterend\", template);\r\n        let container = this.$element.nextElementSibling;\r\n        let zIndex = parseInt(dom.getStyle(container, \"z-index\"), 10);\r\n        if (isNaN(zIndex))\r\n            zIndex = 9999;\r\n        dom.setStyle(container, {\r\n            display: \"none\",\r\n            position: \"fixed\",\r\n            margin: 0,\r\n            overflowY: \"auto\",\r\n            height: \"auto\",\r\n            zIndex\r\n        });\r\n        let item = container.querySelector(\"[dn-item]\");\r\n        if (!item)\r\n            throw new Error(\"The container template must also have a child element with 'dn-item' attribute on it\");\r\n        this._container = container;\r\n        this._containerBody = item.parentElement;\r\n        this._itemTemplate = item.outerHTML;\r\n    }\r\n    _renderNoRecords() {\r\n        this._noRecords = true;\r\n        this._resetContainerBody();\r\n        if (this.$options.noRecordsTemplate) {\r\n            this._containerBody.insertAdjacentHTML(\"beforeend\", this.$options.noRecordsTemplate);\r\n            this._container.style.display = \"\";\r\n            this._updateContainerStyle();\r\n        }\r\n        else\r\n            this._containerBody.style.display = \"none\";\r\n    }\r\n    _staticSourceHandler(dataSource) {\r\n        let value = this.$element.value;\r\n        if (!value.length)\r\n            return;\r\n        if (dataSource.length) {\r\n            this._defineDataFilter(dataSource);\r\n            let items = this._dataFilter({\r\n                dataSource,\r\n                fields: this._searchFields,\r\n                search: value.replace(/\\\\/g, '\\\\\\\\')\r\n            });\r\n            if (!items.length) {\r\n                this._renderNoRecords();\r\n                return;\r\n            }\r\n            this._noRecords = false;\r\n            this._render(items, value);\r\n            return;\r\n        }\r\n        this._renderNoRecords();\r\n    }\r\n    _readData(data) {\r\n        let root = this.$options.dataRoot;\r\n        if (!root)\r\n            return data;\r\n        root.split('.').forEach(property => {\r\n            if (data.hasOwnProperty(property))\r\n                data = data[property];\r\n            return data;\r\n        });\r\n        return data;\r\n    }\r\n    _httpSourceHandler(url) {\r\n        let value = this.$element.value.trim();\r\n        if (!value.length)\r\n            return;\r\n        url = url.replace(\"${query}\", encodeURIComponent(value));\r\n        this._promiseSourceHandler(() => {\r\n            return http.get(url);\r\n        });\r\n    }\r\n    _promiseSourceHandler(promise) {\r\n        window.clearTimeout(this._timer);\r\n        this._timer = window.setTimeout(() => {\r\n            this.$invoke(this.$options.onBeforeRequest, this);\r\n            promise(encodeURIComponent(this.$element.value)).then(response => {\r\n                let data = this._readData(response);\r\n                if (!data || !Array.isArray(data))\r\n                    throw new Error(\"The data source is invalid. Check if the options.dataRoot is correct.\");\r\n                this.$invoke(this.$options.onAfterRequest, this, { container: this._container, data });\r\n                this._staticSourceHandler(data);\r\n            }, error => console.error(error));\r\n        }, this.$options.delay);\r\n    }\r\n    _normalizeValue(value) {\r\n        if (!utils.isDefined(value))\r\n            return '';\r\n        if (!utils.isString(value))\r\n            value = value.toString().trim();\r\n        return value;\r\n    }\r\n    _resetContainerBody() {\r\n        Array.from(this._containerBody.children).forEach(child => {\r\n            this.$removeEvent(\"mouseenter\", this._onItemMouseEnterEvent, child);\r\n            this.$removeEvent(\"click\", this._onItemClick, child);\r\n        });\r\n        dom.removeChildren(this._containerBody);\r\n    }\r\n    _render(dataSource, value) {\r\n        this._resetContainerBody();\r\n        let options = this.$options;\r\n        let len = Math.min(dataSource.length, options.maxResults);\r\n        let rawValue = utils.noDiacritics(value);\r\n        let expr = new RegExp(rawValue, 'gi');\r\n        for (let i = 0; i < len; i++) {\r\n            let item = Object.assign({}, dataSource[i]);\r\n            let content = this._itemTemplate;\r\n            this._searchFields.forEach(field => {\r\n                let fieldValue = this._normalizeValue(item[field]);\r\n                if (!fieldValue)\r\n                    return;\r\n                let result = fieldValue.split('');\r\n                utils.noDiacritics(fieldValue).replace(expr, (match, index) => {\r\n                    let matchesTemplate = options.matchesTemplate.replace(\"${0}\", fieldValue.substr(index, match.length));\r\n                    let strIndex = index + match.length - 1;\r\n                    while (strIndex > index)\r\n                        result.splice(strIndex--, 1);\r\n                    result.splice(index, 1, matchesTemplate);\r\n                    return '';\r\n                });\r\n                content = content.replace(new RegExp(`\\\\\\${${field}\\\\}`, 'g'), result.join(''));\r\n            });\r\n            content = utils.template(content, item);\r\n            this._containerBody.insertAdjacentHTML(\"beforeend\", content);\r\n            this._containerBody.lastElementChild[SEARCH_BOX_DATA_VALUE] = dataSource[i];\r\n        }\r\n        [...this._containerBody.querySelectorAll(\"img[dn-src]\")].forEach(img => {\r\n            let value = img.getAttribute(\"dn-src\");\r\n            if (value && value.length > 0)\r\n                img.src = value;\r\n        });\r\n        this._container.style.display = len ? \"block\" : \"none\";\r\n        this._updateContainerStyle();\r\n        this._registerContainerEvents();\r\n        this.$invoke(this.$options.onResultsRender, this, { container: this._container });\r\n    }\r\n    _defineDataFilter(dataSource) {\r\n        if (this._dataFilter)\r\n            return;\r\n        if (utils.isString(dataSource[0])) {\r\n            this._dataFilter = this._stringDataFilter;\r\n            this._searchFields = [\"0\"];\r\n        }\r\n        else {\r\n            this._dataFilter = this._objectDataFilter;\r\n            let fields = this.$options.searchFields;\r\n            if (!Array.isArray(fields) || !fields.length)\r\n                fields = Object.keys(dataSource[0]);\r\n            this._searchFields = fields;\r\n        }\r\n    }\r\n    _stringDataFilter(filter) {\r\n        return this._objectDataFilter(Object.assign(filter, {\r\n            dataSource: filter.dataSource.map(p => { return { 0: p }; })\r\n        }));\r\n    }\r\n    _objectDataFilter(filter) {\r\n        let value = utils.noDiacritics(filter.search);\r\n        let expr = new RegExp(value, 'i');\r\n        let fields = filter.fields;\r\n        let len = fields.length;\r\n        return filter.dataSource.reduce((previous, current) => {\r\n            for (let i = 0; i < len; i++) {\r\n                let raw = utils.noDiacritics(current[fields[i]]);\r\n                if (expr.test(raw)) {\r\n                    previous.push(current);\r\n                    break;\r\n                }\r\n            }\r\n            return previous;\r\n        }, []);\r\n    }\r\n    _defineSourceHandler() {\r\n        if (Array.isArray(this.$options.source)) {\r\n            this._sourceHandler = this._staticSourceHandler;\r\n        }\r\n        else if (utils.isString(this.$options.source)) {\r\n            this._sourceHandler = this._httpSourceHandler;\r\n        }\r\n        else {\r\n            this._sourceHandler = this._promiseSourceHandler;\r\n        }\r\n    }\r\n    _selectItem(item) {\r\n        this._resetContainerBody();\r\n        let data = item[SEARCH_BOX_DATA_VALUE];\r\n        let field = utils.template(this.$options.fieldTemplate, data);\r\n        this.$element.value = field;\r\n        this.$invoke(this.$options.onItemSelected, this, {\r\n            data,\r\n            text: item.innerText.trim()\r\n        });\r\n        this.$element.dispatchEvent(new Event(\"input\", { bubbles: true }));\r\n        this._container.style.display = \"none\";\r\n    }\r\n    _registerEvents() {\r\n        this.$addEvent(\"keydown\", this._onKeyDownEvent);\r\n        this.$addEvent(\"input\", this._onInputEvent);\r\n        this.$addEvent(\"blur\", this._onBlurEvent);\r\n        this.$addEvent(\"scroll\", this._onWindowScrollOrResize, window);\r\n        this.$addEvent(\"resize\", this._onWindowScrollOrResize, window);\r\n    }\r\n    _keyboardNavigate(e) {\r\n        let isGoingDown = e.key === \"ArrowDown\";\r\n        if (!isGoingDown && e.key !== \"ArrowUp\")\r\n            return;\r\n        let active = this.$options.activeItemClass;\r\n        let item = this._containerBody.querySelector('.' + active);\r\n        let action = isGoingDown ? [\"firstElementChild\", \"nextElementSibling\"] : [\"lastElementChild\", \"previousElementSibling\"];\r\n        if (item) {\r\n            dom.removeClass(item, active);\r\n            item = item[action[1]];\r\n        }\r\n        if (!item)\r\n            item = this._containerBody[action[0]];\r\n        dom.addClass(item, active);\r\n        let data = item[SEARCH_BOX_DATA_VALUE];\r\n        this.$invoke(this.$options.onActiveItem, this, {\r\n            data,\r\n            text: item.innerText.trim()\r\n        });\r\n        this._updateContainerScrollPosition(item, isGoingDown);\r\n    }\r\n    _updateContainerScrollPosition(item, isGoingDown) {\r\n        let body = this._containerBody;\r\n        let value = (item === body.firstElementChild)\r\n            ? 0\r\n            : (item === body.lastElementChild)\r\n                ? body.scrollHeight\r\n                : -1;\r\n        if (value > -1) {\r\n            body.scrollTop = value;\r\n            return;\r\n        }\r\n        let max = body.offsetHeight;\r\n        let top = item.offsetTop + (isGoingDown ? item.offsetHeight : 0);\r\n        if (top > (max + body.scrollTop)) {\r\n            body.scrollTop = (top + (isGoingDown ? item.offsetHeight * 0.2 : item.offsetHeight)) - max;\r\n            return;\r\n        }\r\n        let diff = top - body.scrollTop;\r\n        if (diff < 0)\r\n            body.scrollTop = top - (isGoingDown ? item.offsetHeight : item.offsetHeight * 0.2);\r\n    }\r\n    _onWindowScrollOrResize() {\r\n        if (dom.isVisible(this._container))\r\n            this._updateContainerStyle();\r\n    }\r\n    _onKeyDownEvent(e) {\r\n        if (!dom.isVisible(this._container) || this._noRecords)\r\n            return;\r\n        if (e.key === \"Enter\" || e.key === \"Tab\") {\r\n            let active = this.$options.activeItemClass;\r\n            let item = this._containerBody.querySelector('.' + active);\r\n            if (!item) {\r\n                if (this._containerBody.children.length === 1)\r\n                    item = this._containerBody.firstElementChild;\r\n                else\r\n                    return;\r\n            }\r\n            if (item)\r\n                this._selectItem(item);\r\n            if (e.key === \"Enter\")\r\n                e.preventDefault();\r\n            return;\r\n        }\r\n        this._keyboardNavigate(e);\r\n    }\r\n    _onInputEvent(e) {\r\n        let value = this.$element.value;\r\n        if (!e.isTrusted)\r\n            return;\r\n        if (value.length && value.length < this.$options.minLength)\r\n            return;\r\n        this._sourceHandler(this.$options.source);\r\n        if (!value.length)\r\n            this._container.style.display = \"none\";\r\n    }\r\n    _onBlurEvent() {\r\n        if (!this._container.matches(\":hover\"))\r\n            this._container.style.display = \"none\";\r\n    }\r\n    _updateContainerStyle() {\r\n        let rect = this.$element.getBoundingClientRect();\r\n        this._container.style.minWidth = rect.width + 'px';\r\n        this._container.style.height = \"auto\";\r\n        let offsetY = this.$options.offsetY;\r\n        let offsetX = this.$options.offsetX;\r\n        let containerHeight = this._container.offsetHeight + offsetY;\r\n        let bottomSize = window.innerHeight - rect.bottom;\r\n        let maxSize = Math.max(rect.top, bottomSize);\r\n        let newContainerHeight = Math.min(containerHeight, maxSize);\r\n        if (newContainerHeight < containerHeight)\r\n            this._container.style.height = newContainerHeight + 'px';\r\n        let x = rect.left + offsetX;\r\n        let y = bottomSize >= rect.top\r\n            ? rect.bottom + offsetY\r\n            : rect.top - this._container.offsetHeight - offsetY;\r\n        if (this._root) {\r\n            let rootRect = this._root.getBoundingClientRect();\r\n            x -= rootRect.left;\r\n            y -= rootRect.top;\r\n        }\r\n        this._container.style.top = y + 'px';\r\n        this._container.style.left = x + 'px';\r\n    }\r\n    _registerContainerEvents() {\r\n        Array.from(this._containerBody.children).forEach(child => {\r\n            this.$addEvent(\"mouseenter\", this._onItemMouseEnterEvent, child);\r\n            this.$addEvent(\"click\", this._onItemClick, child);\r\n        });\r\n    }\r\n    _onItemMouseEnterEvent(e) {\r\n        let className = this.$options.activeItemClass;\r\n        let currentItem = e.target.parentElement.querySelector('.' + className);\r\n        if (currentItem)\r\n            dom.removeClass(currentItem, className);\r\n        dom.addClass(e.target, className);\r\n    }\r\n    _onItemClick(e) {\r\n        this._selectItem(e.currentTarget);\r\n    }\r\n    static from(selector, options) {\r\n        return [...document.querySelectorAll(selector)].map(element => new SearchBox(element, options));\r\n    }\r\n}\r\nexports.default = SearchBox;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction merge(target, ...sources) {\r\n    sources.forEach(source => {\r\n        for (let p in source || {}) {\r\n            if (source.hasOwnProperty(p) && isDefined(source[p])) {\r\n                if (source[p].constructor === Object) {\r\n                    target[p] = target[p] || {};\r\n                    merge(target[p], source[p]);\r\n                }\r\n                else {\r\n                    target[p] = source[p];\r\n                }\r\n            }\r\n        }\r\n    });\r\n    return target;\r\n}\r\nexports.merge = merge;\r\nfunction isDefined(value) {\r\n    return value !== undefined && value !== null;\r\n}\r\nexports.isDefined = isDefined;\r\nfunction isJsonLike(value) {\r\n    let start = /^\\[|^\\{(?!\\{)/;\r\n    let ends = { '[': /]$/, '{': /}$/ };\r\n    let m = value.match(start);\r\n    return !!m && ends[m[0]].test(value);\r\n}\r\nexports.isJsonLike = isJsonLike;\r\nfunction isFunction(value) {\r\n    return typeof value === \"function\";\r\n}\r\nexports.isFunction = isFunction;\r\n;\r\nfunction isString(value) {\r\n    return typeof value === \"string\";\r\n}\r\nexports.isString = isString;\r\n/**\r\n * Determines whether a reference is an object.\r\n * Unlike the `typeof` in javascript, `null` values are not considered objects.\r\n * @param value\r\n */\r\nfunction isObject(value) {\r\n    return value !== null && typeof value === \"object\";\r\n}\r\nexports.isObject = isObject;\r\n/**\r\n * Determines whether a reference is a valid number.\r\n *\r\n * Unlike the `typeof` in JavaScript, the special numeric values `NaN`, `Inifity` and `-Infinity` are not considered as valid numbers.\r\n * @param value Reference to check.\r\n */\r\nfunction isNumber(value) {\r\n    return typeof value === \"number\" && !isNaN(value) && isFinite(value);\r\n}\r\nexports.isNumber = isNumber;\r\nfunction template(format, data, prefix = '${', suffix = '}') {\r\n    let regex = new RegExp(`\\\\${prefix}([^(\\\\${suffix})]+)\\\\${suffix}`, 'g');\r\n    let result = format.toString().replace(regex, (expr, key) => {\r\n        return isDefined(data[key]) ? data[key] : '';\r\n    });\r\n    return result;\r\n}\r\nexports.template = template;\r\nfunction toQuery(obj, keyEncoding = (v) => encodeURIComponent(v), valueEncoding = (v) => encodeURIComponent(v)) {\r\n    let query = [];\r\n    for (let p in obj) {\r\n        if (obj.hasOwnProperty(p)) {\r\n            if (Array.isArray(obj[p])) {\r\n                obj[p].forEach(item => {\r\n                    query.push(`${keyEncoding(p)}=${valueEncoding(item)}`);\r\n                });\r\n            }\r\n            else {\r\n                query.push(`${keyEncoding(p)}=${valueEncoding(obj[p])}`);\r\n            }\r\n        }\r\n    }\r\n    return query.join(\"&\");\r\n}\r\nexports.toQuery = toQuery;\r\nfunction fromQuery(query, keyEncoding = (v) => decodeURIComponent(v).toLowerCase(), valueEncoding = (v) => decodeURIComponent(v)) {\r\n    if (!query)\r\n        return null;\r\n    return query.split('&').reduce((previous, current) => {\r\n        let item = current.split('=');\r\n        let key = keyEncoding(item[0]);\r\n        let value = valueEncoding(item[1]);\r\n        if (previous[key]) {\r\n            if (!Array.isArray(previous[key]))\r\n                previous[key] = [previous[key]];\r\n            previous[key].push(value);\r\n        }\r\n        else {\r\n            previous[key] = value;\r\n        }\r\n        return previous;\r\n    }, {});\r\n}\r\nexports.fromQuery = fromQuery;\r\nfunction titleCase(value) {\r\n    return value.replace(/(\\w+)/g, v => v[0].toUpperCase() + v.slice(1).toLowerCase());\r\n}\r\nexports.titleCase = titleCase;\r\nfunction noDiacritics(value) {\r\n    if (!isString(value))\r\n        return value;\r\n    let patterns = {\r\n        'A': /[\\300-\\306]/g,\r\n        'a': /[\\340-\\346]/g,\r\n        'E': /[\\310-\\313]/g,\r\n        'e': /[\\350-\\353]/g,\r\n        'I': /[\\314-\\317]/g,\r\n        'i': /[\\354-\\357]/g,\r\n        'O': /[\\322-\\330]/g,\r\n        'o': /[\\362-\\370]/g,\r\n        'U': /[\\331-\\334]/g,\r\n        'u': /[\\371-\\374]/g,\r\n        'N': /[\\321]/g,\r\n        'n': /[\\361]/g,\r\n        'C': /[\\307]/g,\r\n        'c': /[\\347]/g\r\n    };\r\n    for (let key in patterns)\r\n        value = value.replace(patterns[key], key);\r\n    return value;\r\n}\r\nexports.noDiacritics = noDiacritics;\r\n"],"sourceRoot":""}